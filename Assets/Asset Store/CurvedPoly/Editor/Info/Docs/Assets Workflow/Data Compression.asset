%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: -1337209931, guid: cb982876f862dda4c84cfd49bae5a49b, type: 3}
  m_Name: Data Compression
  m_EditorClassIdentifier: 
  topElementName: TransformsOperator
  elementname: Data Compression
  iconSet: []
  title: Data Compression
  paragraphs:
  - icons: []
    texts:
    - 'Assets are compressed in a very simple way: decide the resolution you want
      to have to each parameter, and any value will be truncated to that precision.'
    mod: 0
  - icons: []
    texts:
    - '<i>For instance</i>: if there is an x coordinate of 1.46123 and resolution
      is 0.01 the number is truncated to 1.46. Assets will stores the exact amount
      of bits required for the truncated number.'
    mod: 0
  - icons: []
    texts:
    - '<i>NOTE 1</i>: compression applies only on assets data, not on models or on
      meshes. Once a Curved Poly model has been loaded from the Asset file, its meshes
      and mesh vertices and normals and triangles are computed at the maximum precision
      available in Unity.'
    mod: 0
  - icons: []
    texts:
    - '<i>NOTE 2</i>: while you are editing a model, Curved Poly Editor will keep
      Uncompressed Data at its maximum available precision. So, if your model is looking
      a bit unprecise, you can come here and increase precision: Curved Poly editor
      will use the uncompressed data it has to re-compress data in the higher precision
      format of your choice. '
    mod: 0
  - icons: []
    texts:
    - Presets
    mod: 4
  - icons: []
    texts:
    - You can choose between 3 presets (NORMAL, LOW, HIGH) or make a custom choice.
      Resolution are set according to the preset.
    mod: 0
  - icons: []
    texts:
    - Vertex Precision
    mod: 4
  - icons: []
    texts:
    - 'Available precisions are MILLI (0.001), DECIMILLI (0.0001), CENTI (0.01) or
      DECI(0.1). It make sense to switch to lower precisions (i.e. DECI) for very
      huge objects, and to higher precisions (i.e. DECIMILLI) for very little objects.
      Keep this in mind: if 1 means a yard or a meter for you, MILLI 0.001 means a
      milliyard or a millimeter. In case you need more precision then DECIMILLI (0.0001)
      you can just use a different scale on the object.'
    mod: 0
  - icons: []
    texts:
    - Normal Precision
    mod: 4
  - icons: []
    texts:
    - "Normals Resolution works around angles resolution rather than value resolution.
      Here MEDIUM stays for a resolution of approximately 1.5\xB0 degrees. HIGH stays
      for a precision of 0.375\xB0 (its 1/4 of MEDIUM). LOW stays for a resolution
      of approximately 6.0\xB0 and should be used only for very simple models (it
      works fine on unshaped primitives for instance). Normals are compressed in a
      way which prioritize on 90\xB0 degrees angles, so any normal which is aligned
      with x, y or z axis is always stored at maximum precision."
    mod: 0
  - icons: []
    texts:
    - UV Precision
    mod: 4
  - icons: []
    texts:
    - There are a bunch of available UV Precision. Here you may choose carefully which
      one to use. The basic idea is that if your model has applied a material with
      a texture of 1024x1024 pixels, you should not need a precision higher of the
      size of the pixel in texture space. This is what <b>1 on 1024</b> stands for.
      So, ideally, if you have a texture of 512x512 pixels, <b>1 on 512</b> is a decent
      choice and <b>1 on 1024</b> is a better choice, while <b>1 on 4096</b> is way
      too much what you really need. Numbers generated in this way may look a bit
      weird, so you have the option to choose simple decimal resolution like <b>1
      on 1000</b> (meaning 0.0001), which is supposed to be a bit more precise than
      <b>1 on 512</b> and a bit less than <b>1 on 1024</b>.
    mod: 0
